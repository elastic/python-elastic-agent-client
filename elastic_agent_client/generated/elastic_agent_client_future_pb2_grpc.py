# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import elastic_agent_client_future_pb2 as elastic__agent__client__future__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in elastic_agent_client_future_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ElasticAgentStoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BeginTx = channel.unary_unary(
                '/proto.ElasticAgentStore/BeginTx',
                request_serializer=elastic__agent__client__future__pb2.StoreBeginTxRequest.SerializeToString,
                response_deserializer=elastic__agent__client__future__pb2.StoreBeginTxResponse.FromString,
                _registered_method=True)
        self.GetKey = channel.unary_unary(
                '/proto.ElasticAgentStore/GetKey',
                request_serializer=elastic__agent__client__future__pb2.StoreGetKeyRequest.SerializeToString,
                response_deserializer=elastic__agent__client__future__pb2.StoreGetKeyResponse.FromString,
                _registered_method=True)
        self.SetKey = channel.unary_unary(
                '/proto.ElasticAgentStore/SetKey',
                request_serializer=elastic__agent__client__future__pb2.StoreSetKeyRequest.SerializeToString,
                response_deserializer=elastic__agent__client__future__pb2.StoreSetKeyResponse.FromString,
                _registered_method=True)
        self.DeleteKey = channel.unary_unary(
                '/proto.ElasticAgentStore/DeleteKey',
                request_serializer=elastic__agent__client__future__pb2.StoreDeleteKeyRequest.SerializeToString,
                response_deserializer=elastic__agent__client__future__pb2.StoreDeleteKeyResponse.FromString,
                _registered_method=True)
        self.CommitTx = channel.unary_unary(
                '/proto.ElasticAgentStore/CommitTx',
                request_serializer=elastic__agent__client__future__pb2.StoreCommitTxRequest.SerializeToString,
                response_deserializer=elastic__agent__client__future__pb2.StoreCommitTxResponse.FromString,
                _registered_method=True)
        self.DiscardTx = channel.unary_unary(
                '/proto.ElasticAgentStore/DiscardTx',
                request_serializer=elastic__agent__client__future__pb2.StoreDiscardTxRequest.SerializeToString,
                response_deserializer=elastic__agent__client__future__pb2.StoreDiscardTxResponse.FromString,
                _registered_method=True)


class ElasticAgentStoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BeginTx(self, request, context):
        """Key-Value state storage is provided for each unit.

        Transactional store is provided to allow multiple key operations to occur before a commit to ensure consistent
        state when multiple keys make up the state of an units persistent state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitTx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscardTx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ElasticAgentStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BeginTx': grpc.unary_unary_rpc_method_handler(
                    servicer.BeginTx,
                    request_deserializer=elastic__agent__client__future__pb2.StoreBeginTxRequest.FromString,
                    response_serializer=elastic__agent__client__future__pb2.StoreBeginTxResponse.SerializeToString,
            ),
            'GetKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKey,
                    request_deserializer=elastic__agent__client__future__pb2.StoreGetKeyRequest.FromString,
                    response_serializer=elastic__agent__client__future__pb2.StoreGetKeyResponse.SerializeToString,
            ),
            'SetKey': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKey,
                    request_deserializer=elastic__agent__client__future__pb2.StoreSetKeyRequest.FromString,
                    response_serializer=elastic__agent__client__future__pb2.StoreSetKeyResponse.SerializeToString,
            ),
            'DeleteKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteKey,
                    request_deserializer=elastic__agent__client__future__pb2.StoreDeleteKeyRequest.FromString,
                    response_serializer=elastic__agent__client__future__pb2.StoreDeleteKeyResponse.SerializeToString,
            ),
            'CommitTx': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitTx,
                    request_deserializer=elastic__agent__client__future__pb2.StoreCommitTxRequest.FromString,
                    response_serializer=elastic__agent__client__future__pb2.StoreCommitTxResponse.SerializeToString,
            ),
            'DiscardTx': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscardTx,
                    request_deserializer=elastic__agent__client__future__pb2.StoreDiscardTxRequest.FromString,
                    response_serializer=elastic__agent__client__future__pb2.StoreDiscardTxResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ElasticAgentStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.ElasticAgentStore', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ElasticAgentStore(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BeginTx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ElasticAgentStore/BeginTx',
            elastic__agent__client__future__pb2.StoreBeginTxRequest.SerializeToString,
            elastic__agent__client__future__pb2.StoreBeginTxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ElasticAgentStore/GetKey',
            elastic__agent__client__future__pb2.StoreGetKeyRequest.SerializeToString,
            elastic__agent__client__future__pb2.StoreGetKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ElasticAgentStore/SetKey',
            elastic__agent__client__future__pb2.StoreSetKeyRequest.SerializeToString,
            elastic__agent__client__future__pb2.StoreSetKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ElasticAgentStore/DeleteKey',
            elastic__agent__client__future__pb2.StoreDeleteKeyRequest.SerializeToString,
            elastic__agent__client__future__pb2.StoreDeleteKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommitTx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ElasticAgentStore/CommitTx',
            elastic__agent__client__future__pb2.StoreCommitTxRequest.SerializeToString,
            elastic__agent__client__future__pb2.StoreCommitTxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DiscardTx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ElasticAgentStore/DiscardTx',
            elastic__agent__client__future__pb2.StoreDiscardTxRequest.SerializeToString,
            elastic__agent__client__future__pb2.StoreDiscardTxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ElasticAgentArtifactStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Fetch = channel.unary_stream(
                '/proto.ElasticAgentArtifact/Fetch',
                request_serializer=elastic__agent__client__future__pb2.ArtifactFetchRequest.SerializeToString,
                response_deserializer=elastic__agent__client__future__pb2.ArtifactFetchResponse.FromString,
                _registered_method=True)


class ElasticAgentArtifactServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Fetch(self, request, context):
        """Fetches an artifact from the artifact store.

        Response from this call can be chunked over multiple `ArtifactFetchResponse` for very large responses. A minimum
        of two responses will always be returned. The last response has eof set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ElasticAgentArtifactServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Fetch': grpc.unary_stream_rpc_method_handler(
                    servicer.Fetch,
                    request_deserializer=elastic__agent__client__future__pb2.ArtifactFetchRequest.FromString,
                    response_serializer=elastic__agent__client__future__pb2.ArtifactFetchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ElasticAgentArtifact', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.ElasticAgentArtifact', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ElasticAgentArtifact(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/proto.ElasticAgentArtifact/Fetch',
            elastic__agent__client__future__pb2.ArtifactFetchRequest.SerializeToString,
            elastic__agent__client__future__pb2.ArtifactFetchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ElasticAgentLogStub(object):
    """Log service is only exposed to programs that are not started as sub-processes by Elastic Agent.

    This allows services that are not started as sub-processes to write to the same stdout that programs that are
    started as subprocess. A program that is as a sub-process with stdout connected does not have the ability to use
    this service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Log = channel.unary_unary(
                '/proto.ElasticAgentLog/Log',
                request_serializer=elastic__agent__client__future__pb2.LogMessageRequest.SerializeToString,
                response_deserializer=elastic__agent__client__future__pb2.LogMessageResponse.FromString,
                _registered_method=True)


class ElasticAgentLogServicer(object):
    """Log service is only exposed to programs that are not started as sub-processes by Elastic Agent.

    This allows services that are not started as sub-processes to write to the same stdout that programs that are
    started as subprocess. A program that is as a sub-process with stdout connected does not have the ability to use
    this service.
    """

    def Log(self, request, context):
        """Log messages to the Elastic Agent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ElasticAgentLogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Log': grpc.unary_unary_rpc_method_handler(
                    servicer.Log,
                    request_deserializer=elastic__agent__client__future__pb2.LogMessageRequest.FromString,
                    response_serializer=elastic__agent__client__future__pb2.LogMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ElasticAgentLog', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.ElasticAgentLog', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ElasticAgentLog(object):
    """Log service is only exposed to programs that are not started as sub-processes by Elastic Agent.

    This allows services that are not started as sub-processes to write to the same stdout that programs that are
    started as subprocess. A program that is as a sub-process with stdout connected does not have the ability to use
    this service.
    """

    @staticmethod
    def Log(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ElasticAgentLog/Log',
            elastic__agent__client__future__pb2.LogMessageRequest.SerializeToString,
            elastic__agent__client__future__pb2.LogMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
